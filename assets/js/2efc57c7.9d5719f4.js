"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[355],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:7},i="Simple Transaction Mode",l={unversionedId:"cli-reference/simple-tx-mode",id:"cli-reference/simple-tx-mode",title:"Simple Transaction Mode",description:"",source:"@site/docs/cli-reference/simple-tx-mode.md",sourceDirName:"cli-reference",slug:"/cli-reference/simple-tx-mode",permalink:"/brambl-cli/docs/current/cli-reference/simple-tx-mode",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Transaction Mode",permalink:"/brambl-cli/docs/current/cli-reference/transaction-mode"},next:{title:"Simple Minting Mode",permalink:"/brambl-cli/docs/current/cli-reference/simple-minting.mode"}},s={},c=[],d={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"simple-transaction-mode"},"Simple Transaction Mode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Command: simple-transaction [create|broadcast|prove] [options]\nSimple transaction mode\nCommand: simple-transaction create\nCreate transaction\n  --from-party <value>     Party where we are sending the funds from\n  --from-contract <value>  Contract where we are sending the funds from\n  --from-state <value>     State from where we are sending the funds from\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --bifrost-port <value>   Port Bifrost node. (mandatory)\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  -t, --to <value>         Address to send LVLs to. (mandatory if to-party and to-contract are not provided)\n  --to-party <value>       Party to send LVLs to. (mandatory if to is not provided)\n  --to-contract <value>    Contract to send LVLs to. (mandatory if to is not provided)\n  -a, --amount <value>     Amount to send simple transaction\nCommand: simple-transaction broadcast\nBroadcast transaction\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --bifrost-port <value>   Port Bifrost node. (mandatory)\n  -i, --input <value>      The input file. (mandatory)\nCommand: simple-transaction prove\nProve transaction\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  -i, --input <value>      The input file. (mandatory)\n")))}p.isMDXComponent=!0}}]);