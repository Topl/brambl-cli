"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[748],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,f=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},i="Create a Simple Transaction",l={unversionedId:"how-tos/create-simple-tx",id:"how-tos/create-simple-tx",title:"Create a Simple Transaction",description:"To create a simple transaction you need to run the following command:",source:"@site/docs/how-tos/create-simple-tx.md",sourceDirName:"how-tos",slug:"/how-tos/create-simple-tx",permalink:"/brambl-cli/docs/current/how-tos/create-simple-tx",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Get the Current Address",permalink:"/brambl-cli/docs/current/how-tos/current-address"},next:{title:"Prove a Transaction",permalink:"/brambl-cli/docs/current/how-tos/prove-simple-tx"}},p={},s=[],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-simple-transaction"},"Create a Simple Transaction"),(0,a.kt)("p",null,"To create a simple transaction you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-transaction create --from-party $PARTY --from-contract $CONTRACT --from-state $STATE -t $TO_ADDRESS -w $PASSWORD --port $PORT -o $TX_FILE -n $NETWORK -a $SEND_AMOUNT -h $HOST -i $MAIN_KEY --walletdb $WALLET\n")),(0,a.kt)("p",null,"This will create a transaction that spends the state ",(0,a.kt)("inlineCode",{parentName:"p"},"$STATE")," of the contract ",(0,a.kt)("inlineCode",{parentName:"p"},"$CONTRACT")," of the party ",(0,a.kt)("inlineCode",{parentName:"p"},"$PARTY")," and sends ",(0,a.kt)("inlineCode",{parentName:"p"},"$SEND_AMOUNT")," polys to the address ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_ADDRESS"),". The transaction will be stored in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"$TX_FILE"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--from-state")," parameter is only required if the party is ",(0,a.kt)("inlineCode",{parentName:"p"},"noparty"),". If the party is ",(0,a.kt)("inlineCode",{parentName:"p"},"self"),", or any contract where there is at least one party, then the ",(0,a.kt)("inlineCode",{parentName:"p"},"--from-state")," parameter is not required."),(0,a.kt)("p",null,"Alternatively, instead of providing an output address, the party and contract of the output can be used instead. To do this, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-transaction create --from-party $FROM_PARTY --from-contract $FROM_CONTRACT --from-state $STATE --to-party $TO_PARTY --to-contract $TO_CONTRACT -w $PASSWORD --port $PORT -o $TX_FILE -n $NETWORK -a $SEND_AMOUNT -h $HOST -i $MAIN_KEY --walletdb $WALLET\n")),(0,a.kt)("p",null,"This will create a transaction that spends the state ",(0,a.kt)("inlineCode",{parentName:"p"},"$STATE")," of the contract ",(0,a.kt)("inlineCode",{parentName:"p"},"$FROM_CONTRACT")," of the party ",(0,a.kt)("inlineCode",{parentName:"p"},"$FROM_PARTY")," and sends ",(0,a.kt)("inlineCode",{parentName:"p"},"$SEND_AMOUNT")," polys to the contract ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_CONTRACT")," of the party ",(0,a.kt)("inlineCode",{parentName:"p"},"$TO_PARTY"),". The transaction will be stored in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"$TX_FILE"),". If no state is provided, the next state will be used\nas defined in the cartesian indexing."))}d.isMDXComponent=!0}}]);