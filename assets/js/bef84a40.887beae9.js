"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[5087],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=m(t),p=r,f=u["".concat(s,".").concat(p)]||u[p]||c[p]||o;return t?a.createElement(f,l(l({ref:n},d),{},{components:t})):a.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:5},l="Wallet Mode",i={unversionedId:"cli-reference/wallet-mode",id:"cli-reference/wallet-mode",title:"Wallet Mode",description:"",source:"@site/docs/cli-reference/wallet-mode.md",sourceDirName:"cli-reference",slug:"/cli-reference/wallet-mode",permalink:"/brambl-cli/docs/current/cli-reference/wallet-mode",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Bifrost Query Mode",permalink:"/brambl-cli/docs/current/cli-reference/bifrost-query-mode"},next:{title:"Transaction Mode",permalink:"/brambl-cli/docs/current/cli-reference/transaction-mode"}},s={},m=[],d={toc:m},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wallet-mode"},"Wallet Mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Command: wallet [balance|set-interaction|sync|init|recover-keys|current-address|export-vk|import-vks]\nWallet mode\nCommand: wallet balance [options]\nGet balance of wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>           Port Bifrost node. (mandatory)\n  -s, --secure <value>     Enables the secure connection to the node. (optional)\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\n  --from-address <value>   Address where we are sending the funds from\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet set-interaction [options]\nSet the current interaction\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet sync [options]\nSync wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>           Port Bifrost node. (mandatory)\n  -s, --secure <value>     Enables the secure connection to the node. (optional)\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --fellowship-name <value>\n                           Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet init [options]\nInitialize wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  --newwalletdb <value>    Wallet DB file. (mandatory)\n  -P, --passphrase <value>\n                           Passphrase for the encrypted key. (optional))\n  --mnemonicfile <value>   Mnemonic output file. (mandatory)\nCommand: wallet recover-keys [options]\nRecover Wallet Main Key\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -m, --mnemonic <value>   Mnemonic for the key. (mandatory)\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  --newwalletdb <value>    Wallet DB file. (mandatory)\n  -P, --passphrase <value>\n                           Passphrase for the encrypted key. (optional))\nCommand: wallet current-address [options]\nObtain current address\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\nCommand: wallet export-vk [options]\nExport verification key\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --fellowship-name <value>\n                           Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --interaction <value>    Interaction from where we are sending the funds from\nCommand: wallet import-vks [options]\nImport verification key\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --fellowship-name <value>\n                           Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --input-vks <value>      The keys to import. (mandatory)\n  \n")))}c.isMDXComponent=!0}}]);