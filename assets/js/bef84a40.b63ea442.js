"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[87],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(m,".").concat(d)]||p[d]||u[d]||o;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8310:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:5},l="Wallet Mode",i={unversionedId:"cli-reference/wallet-mode",id:"cli-reference/wallet-mode",title:"Wallet Mode",description:"",source:"@site/docs/cli-reference/wallet-mode.md",sourceDirName:"cli-reference",slug:"/cli-reference/wallet-mode",permalink:"/brambl-cli/docs/current/cli-reference/wallet-mode",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Bifrost Query Mode",permalink:"/brambl-cli/docs/current/cli-reference/bifrost-query-mode"},next:{title:"Transaction Mode",permalink:"/brambl-cli/docs/current/cli-reference/transaction-mode"}},m={},c=[],s={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wallet-mode"},"Wallet Mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Command: wallet [sync|init|recover-keys|current-address|export-vk|import-vks] [options]\nWallet mode\nCommand: wallet sync\nSync wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>   Port Bifrost node. (mandatory)\n  --fellowship-name <value>     Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet init\nInitialize wallet\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (optional)\n  --newwallet <value>      Wallet DB file. (mandatory)\n  --mnemonicfile <value>   Mnemonic output file. (mandatory)\n  -P, --passphrase <value>\n                           Passphrase for the encrypted key. (optional))\nCommand: wallet recover-keys\nRecover Wallet Main Key\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -m, --mnemonic <value>   Mnemonic for the key. (mandatory)\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  -o, --output <value>     The output file. (optional)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  -P, --passphrase <value>\n                           Passphrase for the encrypted key. (optional))\nCommand: wallet current-address\nObtain current address\n  --walletdb <value>       Wallet DB file. (mandatory)\nCommand: wallet export-vk\nExport verification key\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  -o, --output <value>     The output file.\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --fellowship-name <value>     Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --interaction <value>          Interaction from where we are sending the funds from\nCommand: wallet import-vks\nImport verification key\n  --walletdb <value>       Wallet DB file. (mandatory)\n  --fellowship-name <value>     Name of the fellowship. (mandatory)\n  --template-name <value>  Name of the template. (mandatory)\n  --input-vks <value>      The keys to import. (mandatory)\n  \n")))}u.isMDXComponent=!0}}]);