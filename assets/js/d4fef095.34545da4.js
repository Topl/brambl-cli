"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),u=r,d=c["".concat(l,".").concat(u)]||c[u]||f[u]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:15},i="Mint a Asset Tokens",s={unversionedId:"how-tos/mint-assets",id:"how-tos/mint-assets",title:"Mint a Asset Tokens",description:"To create a simple minting transaction of asset tokens we run the following",source:"@site/docs/how-tos/mint-assets.md",sourceDirName:"how-tos",slug:"/how-tos/mint-assets",permalink:"/brambl-cli/docs/current/how-tos/mint-assets",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Mint a Series Constructor Token",permalink:"/brambl-cli/docs/current/how-tos/mint-series"},next:{title:"Inspecting a Transaction",permalink:"/brambl-cli/docs/current/how-tos/inspect-tx"}},l={},m=[{value:"Example of asset minting statement file format",id:"example-of-asset-minting-statement-file-format",level:2}],p={toc:m},c="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mint-a-asset-tokens"},"Mint a Asset Tokens"),(0,r.kt)("p",null,"To create a simple minting transaction of asset tokens we run the following\ncommand:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-minting create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE  -h $HOST --port $PORT -n private --keyfile $KEYFILE -w $PASSWORD -o $MINTING_TX -i $AMS --fee $FEE_AMOUNT --walletdb $WALLET_DB --mint-token asset\n")),(0,r.kt)("p",null,"This will create a minting transaction for the fellowship ",(0,r.kt)("inlineCode",{parentName:"p"},"$FELLOWSHIP")," and template ",(0,r.kt)("inlineCode",{parentName:"p"},"$LOCK_TEMPLATE")," and store the result in the file ",(0,r.kt)("inlineCode",{parentName:"p"},"$MINTING_TX"),". The keyfile ",(0,r.kt)("inlineCode",{parentName:"p"},"$KEYFILE")," is used to derive keys. The password for the wallet is ",(0,r.kt)("inlineCode",{parentName:"p"},"$PASSWORD"),". The asset minting statement file is ",(0,r.kt)("inlineCode",{parentName:"p"},"$AMS"),". The fee amount is ",(0,r.kt)("inlineCode",{parentName:"p"},"$FEE_AMOUNT"),". Please note that the amount of tokens to mint is specified in the asset minting statement file."),(0,r.kt)("p",null,"The asset minting also supports a commitment and metadata. These can be added to the statement as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-minting create --from-fellowship $FELLOWSHIP --from-template $LOCK_TEMPLATE  -h $HOST --port $PORT -n private --keyfile $KEYFILE -w $PASSWORD -o $MINTING_TX -i $AMS --fee $FEE_AMOUNT --walletdb $WALLET_DB --mint-token asset\n--commitment $COMMITMENT --ephemeralMetadata $EPHEMERAL_METADATA_FILE\n")),(0,r.kt)("p",null,"The commitment is a 32 byte hexadecimal string. The ephemeral metadata is a JSON file containing the metadata for the ephemeral metadata of the asset."),(0,r.kt)("h2",{id:"example-of-asset-minting-statement-file-format"},"Example of asset minting statement file format"),(0,r.kt)("p",null,"An asset minting statement looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"groupTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#2\nseriesTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#1\nquantity: 1000\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"groupTokenUtxo")," is where the group minting token comes from. The ",(0,r.kt)("inlineCode",{parentName:"p"},"seriesTokenUtxo")," is where the series minting token comes from. The ",(0,r.kt)("inlineCode",{parentName:"p"},"quantity")," is the amount of tokens to mint. This statement also\nsupports metadata. The metadata is optional and can be added to the statement\nas follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"groupTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#2\nseriesTokenUtxo: FYX4xtEh9vvXjSwKvXczqa9TCjgyTCawvfnL6L5M2P5N#1\nquantity: 1000\npermanentMetadata:\n  tickerName: TST\n  name: Test Token\n  description: Test Token Description\n")))}f.isMDXComponent=!0}}]);