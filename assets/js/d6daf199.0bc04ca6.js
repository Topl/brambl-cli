"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[4213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:6},i="Transaction Mode",l={unversionedId:"cli-reference/transaction-mode",id:"cli-reference/transaction-mode",title:"Transaction Mode",description:"",source:"@site/docs/cli-reference/transaction-mode.md",sourceDirName:"cli-reference",slug:"/cli-reference/transaction-mode",permalink:"/brambl-cli/docs/current/cli-reference/transaction-mode",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Wallet Mode",permalink:"/brambl-cli/docs/current/cli-reference/wallet-mode"},next:{title:"Simple Transaction Mode",permalink:"/brambl-cli/docs/current/cli-reference/simple-tx-mode"}},c={},s=[],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transaction-mode"},"Transaction Mode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Command: simple-transaction [create]\nSimple transaction mode\nCommand: simple-transaction create [options]\nCreate transaction\n  --from-fellowship <value>\n                           Fellowship where we are sending the funds from\n  --from-template <value>  Template where we are sending the funds from\n  --from-interaction <value>\n                           Interaction from where we are sending the funds from\n  --change-fellowship <value>\n                           Fellowship where we are sending the change to\n  --change-template <value>\n                           Template where we are sending the change to\n  --change-interaction <value>\n                           Interaction where we are sending the change to\n  -n, --network <value>    Network name: Possible values: mainnet, testnet, private. (mandatory)\n  -h, --host <value>       The host of the node. (mandatory)\n  --port <value>           Port Bifrost node. (mandatory)\n  -s, --secure <value>     Enables the secure connection to the node. (optional)\n  -k, --keyfile <value>    The key file.\n  -w, --password <value>   Password for the encrypted key. (mandatory)\n  --walletdb <value>       Wallet DB file. (mandatory)\n  -o, --output <value>     The output file. (mandatory)\n  --fee <value>            Fee paid for the transaction\n  -t, --to <value>         Address to send LVLs to. (mandatory if to-fellowship and to-template are not provided)\n  --to-fellowship <value>  Fellowship to send LVLs to. (mandatory if to is not provided)\n  --to-template <value>    Template to send LVLs to. (mandatory if to is not provided)\n  -a, --amount <value>     Amount to send\n  --transfer-token <value>\n                           The token type. The valid token types are 'lvl', 'asset', 'group', 'series'.\n  --group-id <value>       Group id.\n  --series-id <value>      Series id.\n")))}u.isMDXComponent=!0}}]);