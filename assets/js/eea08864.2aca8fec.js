"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[210],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),f=i,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:14},a="Mint a Series Constructor Token",s={unversionedId:"how-tos/mint-series",id:"how-tos/mint-series",title:"Mint a Series Constructor Token",description:"To create a simple minting transaction of series constructor tokens we run the",source:"@site/docs/how-tos/mint-series.md",sourceDirName:"how-tos",slug:"/how-tos/mint-series",permalink:"/brambl-cli/docs/current/how-tos/mint-series",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Mint a Group Constructor Token",permalink:"/brambl-cli/docs/current/how-tos/mint-group"},next:{title:"Mint a Asset Tokens",permalink:"/brambl-cli/docs/current/how-tos/mint-assets"}},l={},p=[{value:"Example of series policy file format",id:"example-of-series-policy-file-format",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mint-a-series-constructor-token"},"Mint a Series Constructor Token"),(0,i.kt)("p",null,"To create a simple minting transaction of series constructor tokens we run the\nfollowing command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brambl-cli simple-minting create --from-party $PARTY --from-contract $CONTRACT  -h $HOST --bifrost-port $PORT -n private --keyfile $KEYFILE -w $PASSWORD -o $MINTING_TX -i $SERIES_POLICY  -a $AMOUN_TOKENS_TO_MINT --fee $FEE_AMOUNT --walletdb $WALLET_DB --mint-token series\n")),(0,i.kt)("p",null,"This will create a minting transaction for the party ",(0,i.kt)("inlineCode",{parentName:"p"},"$PARTY")," and contract ",(0,i.kt)("inlineCode",{parentName:"p"},"$CONTRACT")," and store the result in the file ",(0,i.kt)("inlineCode",{parentName:"p"},"$MINTING_TX"),". The keyfile ",(0,i.kt)("inlineCode",{parentName:"p"},"$KEYFILE")," is used to derive keys. The password for the wallet is ",(0,i.kt)("inlineCode",{parentName:"p"},"$PASSWORD"),". The series policy file is ",(0,i.kt)("inlineCode",{parentName:"p"},"$SERIES_POLICY"),". The amount of tokens to mint is ",(0,i.kt)("inlineCode",{parentName:"p"},"$AMOUN_TOKENS_TO_MINT"),". The fee amount is ",(0,i.kt)("inlineCode",{parentName:"p"},"$FEE_AMOUNT"),"."),(0,i.kt)("h2",{id:"example-of-series-policy-file-format"},"Example of series policy file format"),(0,i.kt)("p",null,"A simple series policy looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"label: Alice Series\nregistrationUtxo: 33HxStncsrptPB3ffkGpJNmoYwkkURvhiw92afWzjV3B#0\nfungibility: group-and-series\nquantityDescriptor: liquid\n")),(0,i.kt)("p",null,"A series policy with metadata looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"label: Alice Series\nregistrationUtxo: 33HxStncsrptPB3ffkGpJNmoYwkkURvhiw92afWzjV3B#0\nfungibility: group-and-series\nquantityDescriptor: liquid\npermanentMetadata:\n  type: object\n  properties:\n    name:\n      type: string\n    tickerName:\n      type: string\n    description:\n      type: string\nephemeralMetadata:\n  type: object\n  properties:\n    url:\n      type: string\n    image:\n      type: string\n")))}u.isMDXComponent=!0}}]);